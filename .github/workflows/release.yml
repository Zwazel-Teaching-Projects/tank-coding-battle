name: Build, Cache & Release

on:
  push:
    branches:
      - master

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Windows)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "windows-build"
          workspaces: |
            . -> target/client
            . -> target/server
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Spectator Client (Windows)
        run: cargo brc

      - name: Build Server (Windows)
        run: cargo brs

      - name: Prepare Windows Artifacts
        shell: pwsh
        run: |
          $windowsDir = "windows_build"
          New-Item -ItemType Directory -Force -Path $windowsDir
          # Recursively search for .exe files in both release directories
          Get-ChildItem -Path "target/client/release", "target/server/release" -Recurse -Filter *.exe | ForEach-Object {
            Copy-Item $_.FullName -Destination $windowsDir -Force
          }
          # Copy the assets folder
          Copy-Item -Path assets -Destination "$windowsDir\assets" -Recurse
          # Compress the folder into a zip file
          Compress-Archive -Path "$windowsDir\*" -DestinationPath windows.zip

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-zip
          path: windows.zip

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Linux)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "linux-build"
          workspaces: |
            . -> target/server
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Server (Linux)
        run: cargo brs

      - name: Prepare Linux Artifacts
        run: |
          mkdir -p linux_build
          # Recursively find executable files in the server release directory
          find target/server/release -type f -executable -exec cp {} linux_build/ \;
          # Copy the assets folder
          cp -r assets linux_build/
          # Compress the folder into a zip file
          zip -r linux.zip linux_build

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v3
        with:
          name: linux-zip
          path: linux.zip

  release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: windows-zip
          path: .

      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: linux-zip
          path: .

      - name: Extract Version from Cargo.toml
        id: get_version
        run: |
          # Extract version in the form X.X.X
          VERSION=$(grep '^version' Cargo.toml | head -n1 | sed 's/version *= *"\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Create Git Tag for Release
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          # Forge a tag with the prefix "v" to yield vX.X.X
          git tag -a "v$VERSION" -m "Release version v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          body: "Auto-generated patch notes for version v${{ env.VERSION }}"
          draft: false
          prerelease: false

      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip

      - name: Upload Linux Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip
