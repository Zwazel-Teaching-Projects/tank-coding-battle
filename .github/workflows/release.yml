name: Build, Cache & Release

permissions:
  contents: write
  pull-requests: read

on:
  push:
    branches:
      - master

jobs:
  ## WINDOWS BUILDS

  build-client-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Windows Client)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "windows-client-build"
          workspaces: |
            . -> target/client
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Client (Windows)
        run: cargo brc

      - name: Prepare Windows Client Artifact
        shell: pwsh
        run: |
          $clientExe = Get-ChildItem -Path "target/client/release" -Recurse -Filter "tank-coding-battle.exe" | Select-Object -First 1
          if ($null -eq $clientExe) {
            Write-Error "tank-coding-battle.exe not found in client build"
            exit 1
          }
          Copy-Item $clientExe.FullName -Destination "./tank-coding-battle-win-client.exe" -Force
          Compress-Archive -Path "tank-coding-battle-win-client.exe" -DestinationPath client-windows.zip

      - name: Upload Windows Client Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-windows-artifact
          path: client-windows.zip

  build-server-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Windows Server)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "windows-server-build"
          workspaces: |
            . -> target/server
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Server (Windows)
        run: cargo brs

      - name: Prepare Windows Server Artifact
        shell: pwsh
        run: |
          $serverExe = Get-ChildItem -Path "target/server/release" -Recurse -Filter "tank-coding-battle.exe" | Select-Object -First 1
          if ($null -eq $serverExe) {
            Write-Error "tank-coding-battle.exe not found in server build"
            exit 1
          }
          Copy-Item $serverExe.FullName -Destination "./tank-coding-battle-win-server.exe" -Force
          Compress-Archive -Path "tank-coding-battle-win-server.exe" -DestinationPath server-windows.zip

      - name: Upload Windows Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-windows-artifact
          path: server-windows.zip

  assemble-windows:
    runs-on: windows-latest
    needs: [build-client-windows, build-server-windows]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Client Artifact
        uses: actions/download-artifact@v4
        with:
          name: client-windows-artifact
          path: client_artifact

      - name: Download Server Artifact
        uses: actions/download-artifact@v4
        with:
          name: server-windows-artifact
          path: server_artifact

      - name: Assemble Windows Build
        shell: pwsh
        run: |
          Expand-Archive -Path "client_artifact\client-windows.zip" -DestinationPath .
          Expand-Archive -Path "server_artifact\server-windows.zip" -DestinationPath .
          if (-Not (Test-Path -Path "assets")) {
            Write-Error "assets folder not found in repository"
            exit 1
          }
          Compress-Archive -Path "tank-coding-battle-win-client.exe", "tank-coding-battle-win-server.exe", "assets" -DestinationPath windows.zip

      - name: Upload Assembled Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: windows.zip

  ## LINUX BUILDS

  build-server-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Linux Server)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "linux-server-build"
          workspaces: |
            . -> target/server
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Server (Linux)
        run: cargo brs

      - name: Prepare Linux Server Artifact
        run: |
          server_exe=$(find target/server/release -type f -executable -name "tank-coding-battle" | head -n 1)
          if [ -z "$server_exe" ]; then
            echo "tank-coding-battle not found in server build" >&2
            exit 1
          fi
          cp "$server_exe" ./tank-coding-battle-linux
          zip server-linux.zip tank-coding-battle-linux

      - name: Upload Linux Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-linux-artifact
          path: server-linux.zip

  assemble-linux:
    runs-on: ubuntu-latest
    needs: [build-server-linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Linux Server Artifact
        uses: actions/download-artifact@v4
        with:
          name: server-linux-artifact
          path: server_artifact

      - name: Assemble Linux Build
        run: |
          unzip server_artifact/server-linux.zip -d .
          if [ ! -d "assets" ]; then
            echo "assets folder not found in repository" >&2
            exit 1
          fi
          zip -r linux.zip tank-coding-battle-linux assets

      - name: Upload Assembled Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-zip
          path: linux.zip

  ## RELEASE JOB

  release:
    runs-on: ubuntu-latest
    needs: [assemble-windows, assemble-linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: .

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-zip
          path: .

      - name: Extract Version from Cargo.toml
        id: get_version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n1 | sed 's/version *= *"\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Git Tag for Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          TAG_NAME="v${{ env.VERSION }}"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          generate_release_notes: true
          draft: false
          prerelease: false

      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip

      - name: Upload Linux Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip
