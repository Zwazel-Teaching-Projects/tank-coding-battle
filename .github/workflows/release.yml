name: Build and Release Rust App

on:
  push:
    tags:
      - '*'

jobs:
  build_client_windows:
    name: Build Spectator Client (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        run: rustup toolchain install stable --profile minimal

      - name: Restore Rust cache for client
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: windows-client-${{ hashFiles('**/Cargo.lock') }}
          env-vars: "CARGO"
          workspaces: ". -> target/client"
          cache-targets: "true"
          cache-all-crates: "false"

      - name: Build Spectator Client (Windows)
        run: cargo brc

      - name: Prepare client artifact
        run: |
          mkdir artifact
          copy target\client\release\spectator_client.exe artifact\spectator_client.exe
        shell: cmd

      - name: Upload client artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-windows
          path: artifact/spectator_client.exe

  build_server_windows:
    name: Build Server (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        run: rustup toolchain install stable --profile minimal

      - name: Restore Rust cache for server (Windows)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: windows-server-${{ hashFiles('**/Cargo.lock') }}
          env-vars: "CARGO"
          workspaces: ". -> target/server"
          cache-targets: "true"
          cache-all-crates: "false"

      - name: Build Server (Windows)
        run: cargo brs

      - name: Prepare server artifact (Windows)
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path artifact
          $exe = Get-ChildItem -Path target\server\release\*.exe | Select-Object -First 1
          if (-not $exe) {
            Write-Error "No executable found in target\server\release"
            exit 1
          }
          Copy-Item $exe.FullName -Destination artifact\server.exe

      - name: Upload server artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: server-windows
          path: artifact/server.exe

  build_server_linux:
    name: Build Server (Linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        run: rustup toolchain install stable --profile minimal

      - name: Restore Rust cache for server (Linux)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: linux-server-${{ hashFiles('**/Cargo.lock') }}
          env-vars: "CARGO"
          workspaces: ". -> target/server"
          cache-targets: "true"
          cache-all-crates: "false"

      - name: Build Server (Linux)
        run: cargo brs

      - name: Prepare server artifact (Linux)
        run: |
          mkdir -p artifact
          executable=$(find target/server/release -maxdepth 1 -type f -executable | head -n 1)
          if [ -z "$executable" ]; then
            echo "No executable found in target/server/release"
            exit 1
          fi
          cp "$executable" artifact/server

      - name: Upload server artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: server-linux
          path: artifact/server

  assemble_release:
    name: Assemble Artifacts and Create Release
    needs:
      - build_client_windows
      - build_server_windows
      - build_server_linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download client artifact
        uses: actions/download-artifact@v3
        with:
          name: client-windows

      - name: Download server artifact (Windows)
        uses: actions/download-artifact@v3
        with:
          name: server-windows

      - name: Download server artifact (Linux)
        uses: actions/download-artifact@v3
        with:
          name: server-linux

      - name: Prepare release directories
        run: |
          mkdir -p release/windows release/linux
          # Assemble Windows folder with spectator and server executables
          cp client-windows/spectator_client.exe release/windows/
          cp server-windows/server.exe release/windows/
          # Assemble Linux folder with server executable
          cp server-linux/server release/linux/
          # Copy the assets folder into both release directories
          cp -r assets release/windows/
          cp -r assets release/linux/

      - name: Create zip archives
        run: |
          cd release
          zip -r windows.zip windows
          zip -r linux.zip linux

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip
