name: Build and Release

on:
  push:
    tags:
      - '*'  # Trigger on every tag push

jobs:
  build_windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        run: rustup toolchain install stable --profile minimal

      - name: Cache Rust Build (Windows)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "windows-cargo-cache"
          workspaces: ". -> target"

      - name: Build SERVER (Windows)
        run: cargo brs

      - name: Build SPECTATOR_CLIENT (Windows)
        run: cargo brc

      - name: Prepare Windows Release Artifact
        shell: powershell
        run: |
          mkdir output
          # Copy the essential assets folder
          Copy-Item -Recurse assets output
          # Only transfer the .exe files—discarding your trivial, extraneous files
          Copy-Item -Path target/server\*.exe -Destination output -ErrorAction SilentlyContinue
          Copy-Item -Path target/client\*.exe -Destination output -ErrorAction SilentlyContinue
          Compress-Archive -Path output\* -DestinationPath windows_release.zip

      - uses: actions/upload-artifact@v4
        with:
          name: windows_release
          path: windows_release.zip

  build_linux:
    name: Build on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust stable
        run: rustup toolchain install stable --profile minimal

      - name: Cache Rust Build (Linux)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "linux-cargo-cache"
          workspaces: ". -> target"

      - name: Build SERVER (Linux)
        run: cargo brs

      - name: Prepare Linux Release Artifact
        run: |
          mkdir -p output
          cp -r assets output/
          # Extract only the executable(s) from the build—no surplus clutter for these foolish mortals
          find target/server -maxdepth 1 -type f -executable -exec cp {} output/ \;
          zip -r linux_release.zip output

      - uses: actions/upload-artifact@v4
        with:
          name: linux_release
          path: linux_release.zip

  release:
    name: Create GitHub Release
    needs: [build_windows, build_linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows_release
          path: .

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux_release
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: "Automated release with cunning patch notes—brought forth by my unholy genius."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          asset_path: windows_release.zip
          asset_name: windows_release.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          asset_path: linux_release.zip
          asset_name: linux_release.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}