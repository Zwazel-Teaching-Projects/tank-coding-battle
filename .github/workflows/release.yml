name: Build, Cache & Release

on:
  push:
    branches:
      - master

jobs:
  ## WINDOWS BUILDS

  build-client-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Windows Client)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "windows-client-build"
          workspaces: |
            . -> target/client
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Client (Windows)
        run: cargo brc

      - name: Prepare Windows Client Artifact
        shell: pwsh
        run: |
          $clientDir = "build_client"
          New-Item -ItemType Directory -Force -Path $clientDir
          # Recursively search for .exe files in the client release directory
          Get-ChildItem -Path "target/client/release" -Recurse -Filter *.exe | ForEach-Object {
            Copy-Item $_.FullName -Destination $clientDir -Force
          }
          Compress-Archive -Path "$clientDir\*" -DestinationPath client-windows.zip

      - name: Upload Windows Client Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-windows-artifact
          path: client-windows.zip

  build-server-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Windows Server)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "windows-server-build"
          workspaces: |
            . -> target/server
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Server (Windows)
        run: cargo brs

      - name: Prepare Windows Server Artifact
        shell: pwsh
        run: |
          $serverDir = "build_server"
          New-Item -ItemType Directory -Force -Path $serverDir
          # Recursively search for .exe files in the server release directory
          Get-ChildItem -Path "target/server/release" -Recurse -Filter *.exe | ForEach-Object {
            Copy-Item $_.FullName -Destination $serverDir -Force
          }
          Compress-Archive -Path "$serverDir\*" -DestinationPath server-windows.zip

      - name: Upload Windows Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-windows-artifact
          path: server-windows.zip

  assemble-windows:
    runs-on: windows-latest
    needs: [build-client-windows, build-server-windows]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Client Artifact
        uses: actions/download-artifact@v4
        with:
          name: client-windows-artifact
          path: client_artifact

      - name: Download Server Artifact
        uses: actions/download-artifact@v4
        with:
          name: server-windows-artifact
          path: server_artifact

      - name: Assemble Windows Build
        shell: pwsh
        run: |
          $windowsDir = "windows_build"
          New-Item -ItemType Directory -Force -Path "$windowsDir\client"
          New-Item -ItemType Directory -Force -Path "$windowsDir\server"
          # Extract the client artifact into the client folder
          Expand-Archive -Path "client_artifact\client-windows.zip" -DestinationPath "$windowsDir\client"
          # Extract the server artifact into the server folder
          Expand-Archive -Path "server_artifact\server-windows.zip" -DestinationPath "$windowsDir\server"
          # Copy the assets folder from the repository
          Copy-Item -Path assets -Destination "$windowsDir\assets" -Recurse
          # Compress the entire windows_build folder
          Compress-Archive -Path "$windowsDir\*" -DestinationPath windows.zip

      - name: Upload Assembled Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: windows.zip

  ## LINUX BUILDS

  build-server-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Restore and Save Rust Cache (Linux Server)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust"
          shared-key: "master"
          key: "linux-server-build"
          workspaces: |
            . -> target/server
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Build Server (Linux)
        run: cargo brs

      - name: Prepare Linux Server Artifact
        run: |
          mkdir -p linux_server_build
          # Recursively find executable files in the server release directory
          find target/server/release -type f -executable -exec cp {} linux_server_build/ \;
          zip -r server-linux.zip linux_server_build

      - name: Upload Linux Server Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-linux-artifact
          path: server-linux.zip

  assemble-linux:
    runs-on: ubuntu-latest
    needs: [build-server-linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Linux Server Artifact
        uses: actions/download-artifact@v4
        with:
          name: server-linux-artifact
          path: server_artifact

      - name: Assemble Linux Build
        run: |
          mkdir -p linux_build/server
          unzip server_artifact/server-linux.zip -d linux_build/server
          # Copy the assets folder from the repository
          cp -r assets linux_build/
          zip -r linux.zip linux_build

      - name: Upload Assembled Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-zip
          path: linux.zip

  ## RELEASE JOB

  release:
    runs-on: ubuntu-latest
    needs: [assemble-windows, assemble-linux]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: .

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-zip
          path: .

      - name: Extract Version from Cargo.toml
        id: get_version
        run: |
          # Extract version in the form X.X.X from Cargo.toml
          VERSION=$(grep '^version' Cargo.toml | head -n1 | sed 's/version *= *"\(.*\)"/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Create Git Tag for Release
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          # Create a tag with the prefix "v" (vX.X.X)
          git tag -a "v$VERSION" -m "Release version v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "Release v${{ env.VERSION }}"
          body: "Auto-generated patch notes for version v${{ env.VERSION }}"
          draft: false
          prerelease: false

      - name: Upload Windows Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows.zip
          asset_name: windows.zip
          asset_content_type: application/zip

      - name: Upload Linux Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux.zip
          asset_name: linux.zip
          asset_content_type: application/zip
