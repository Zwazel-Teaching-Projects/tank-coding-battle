name: Build and Release Rust Application

on:
  push:
    tags:
      - 'v*'  # triggers on any tag starting with "v"

jobs:
  build-linux:
    name: Build Linux Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Cache Rust (Linux Server)
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-linux"
          shared-key: "rust-linux-server"  # static shared key for cross-branch reusability
          key: "server"
          env-vars: "CARGO CC CFLAGS CXX CMAKE RUST"
          workspaces: ". -> target"
          cache-directories: "~/.cargo/registry\n~/.cargo/git"
          cache-targets: "true"

      - name: Build server-linux
        run: cargo brs

      - name: Package Artifacts (Linux)
        run: |
          echo "Packaging server-linux for Linux..."
          mkdir release_artifact
          cp "target/server/release/tank-coding-battle" "release_artifact/tank-coding-battle_server_linux"
          cp -r assets release_artifact/
          zip -r tank-coding-battle_server_linux.zip release_artifact

      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tank-coding-battle_server_linux.zip
          path: tank-coding-battle_server_linux.zip

  build-windows:
    name: Build Windows Variants
    needs: build-linux
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - name: server-win
            build_cmd: "cargo brs"
            binary_dir: "target\\server\\release"
            binary_name: "tank-coding-battle.exe"
            artifact_name: "tank-coding-battle_server_win.zip"
            output_binary: "tank-coding-battle_server_win.exe"
          - name: client-win
            build_cmd: "cargo brc"
            binary_dir: "target\\client\\release"
            binary_name: "tank-coding-battle.exe"
            artifact_name: "tank-coding-battle_client_win.zip"
            output_binary: "tank-coding-battle_client_win.exe"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        run: rustup toolchain install stable --profile minimal

      - name: Cache Rust (Windows - ${{ matrix.name }})
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-win-${{ matrix.name }}"
          shared-key: "rust-win-${{ matrix.name }}"  # ensures each config holds its unique cache across runs
          key: "${{ matrix.name }}"
          env-vars: "CARGO CC CFLAGS CXX CMAKE RUST"
          workspaces: ". -> target"
          cache-directories: "C:\\Users\\runneradmin\\.cargo\\registry\nC:\\Users\\runneradmin\\.cargo\\git"
          cache-targets: "true"

      - name: Build ${{ matrix.name }}
        run: ${{ matrix.build_cmd }}

      - name: Package Artifacts (Windows - ${{ matrix.name }})
        shell: pwsh
        run: |
          Write-Host "Packaging ${{ matrix.name }} for Windows..."
          New-Item -ItemType Directory -Path release_artifact | Out-Null
          Copy-Item -Path "${{ matrix.binary_dir }}\\${{ matrix.binary_name }}" -Destination "release_artifact\\${{ matrix.output_binary }}"
          Copy-Item -Path "assets" -Destination "release_artifact\\assets" -Recurse
          Compress-Archive -Path release_artifact\* -DestinationPath "${{ matrix.artifact_name }}"

      - name: Upload Artifact (Windows - ${{ matrix.name }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}

  release:
    name: Create GitHub Release
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: tank-coding-battle_server_linux.zip
          path: .

      - name: Download Windows Server Artifact
        uses: actions/download-artifact@v4
        with:
          name: tank-coding-battle_server_win.zip
          path: .

      - name: Download Windows Client Artifact
        uses: actions/download-artifact@v4
        with:
          name: tank-coding-battle_client_win.zip
          path: .

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1.15.0
        with:
          tag: ${{ github.ref_name }}
          allowUpdates: true
          generateReleaseNotes: true
          artifacts: "tank-coding-battle_server_linux.zip,tank-coding-battle_server_win.zip,tank-coding-battle_client_win.zip"
